async def sp_vector_search_columns(
    self, 
    query_text: str, 
    tables_list: List[str], 
    num_results_per_table: int,  # This will be 10 (what you want to return)
    index_name: str
) -> List[Dict]:
    """
    For each table:
    1. Fetch 50 results
    2. Rerank 
    3. Keep only top 10
    4. Append to final results
    """
    print(f"üîç Searching: '{query_text}' across {len(tables_list)} table(s)")
    
    client = VectorSearchClient(
        workspace_url=self.DATABRICKS_HOST,
        service_principal_client_id=self.DATABRICKS_CLIENT_ID,
        service_principal_client_secret=self.DATABRICKS_CLIENT_SECRET,
        azure_tenant_id=self.DATABRICKS_TENANT_ID
    )
    
    index = client.get_index(
        endpoint_name="metadata_vectore_search_endpoint",
        index_name=index_name
    )
    index._get_token_for_request = lambda: self.access_token
    
    all_results = []
    
    for table_name in tables_list:
        print(f'üìã Searching table: {table_name}')
        try:
            from databricks.vector_search.reranker import DatabricksReranker
            
            # Step 1: Fetch 50 results with reranking
            results = index.similarity_search(
                query_text=query_text,
                columns=["table_name", "column_name", "col_embedding_content", "llm_context"],
                filters={"table_name": table_name},
                reranker=DatabricksReranker(
                    columns_to_rerank=["column_name", "col_embedding_content"]
                ),
                num_results=50,  # ‚úÖ Fetch 50 rows
                query_type="Hybrid"
            )
            
            # Step 2: Parse results
            if results.get('result', {}).get('data_array'):
                cols = [c['name'] for c in results['manifest']['columns']]
                table_results = [dict(zip(cols, row)) for row in results['result']['data_array']]
                
                # Step 3: Sort by score and keep only top 10
                table_results.sort(key=lambda x: x.get('score', 0.0), reverse=True)
                top_10 = table_results[:num_results_per_table]  # ‚úÖ Keep only top 10
                
                # Step 4: Append to all results
                all_results.extend(top_10)
                
                print(f"  ‚úÖ {table_name}: Fetched 50 ‚Üí Kept top {len(top_10)} (scores: {top_10[0].get('score', 0):.3f} to {top_10[-1].get('score', 0):.3f})")
            else:
                print(f"  ‚ö†Ô∏è {table_name}: No results")
                
        except Exception as e:
            print(f"  ‚ùå {table_name}: Error - {e}")
            import traceback
            traceback.print_exc()
            continue
    
    print(f"\n‚úÖ Total: {len(all_results)} columns from {len(tables_list)} table(s)")
    return all_results
