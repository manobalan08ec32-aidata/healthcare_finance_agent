def call_claude_api_endpoint(self, user_message: str, max_tokens: int = 1000, system_prompt: str = "you are an AI assistant") -> str:
        """
        Call UHG Claude API endpoint using HCP credentials and return the response text.
        """
        BASE_URL = self.CLAUDE_API_URL
        PROJECT_ID = self.CLAUDE_PROJECT_ID
        MODEL_ID = self.CLAUDE_MODEL_ID

        CONFIG = {
            "HCP_CLIENT_ID": self.CLAUDE_CLIENT_ID,
            "HCP_CLIENT_SECRET": self.CLAUDE_CLIENT_SECRET,
            "HCP_AUTH": self.CLAUDE_AUTH_URL,
            "HCP_SCOPE": self.CLAUDE_SCOPE,
            "HCP_GRANT_TYPE": self.CLAUDE_GRANT_TYPE
        }

        def fetch_hcp_token(config):
            data = {
                "grant_type": config["HCP_GRANT_TYPE"],
                "client_id": config["HCP_CLIENT_ID"],
                "client_secret": config["HCP_CLIENT_SECRET"],
                "scope": config["HCP_SCOPE"],
            }
            resp = requests.post(config["HCP_AUTH"], data=data)
            resp.raise_for_status()
            return resp.json()["access_token"]

        try:
            # Step 1: Get token
            token = fetch_hcp_token(CONFIG)

            # Step 2: Prepare headers and payload
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {token}",
                "projectId": PROJECT_ID,
                "guardrail": "high_strength"
            }
            payload = {
                "system": [{"text": system_prompt}],
                "messages": [
                    {
                        "role": "user",
                        "content": [{"text": user_message}]
                    }
                ],
                "inferenceConfig": {
                    "maxTokens": max_tokens
                }
            }
            url = f"{BASE_URL}/model/{MODEL_ID}/converse"
            response = requests.post(url, headers=headers, json=payload, timeout=120)
            response.raise_for_status()
            result = response.json()
            # Correct extraction for UHG Claude API:
            return result["output"]["message"]["content"][0]["text"]
        except Exception as e:
            raise Exception(f"Claude API endpoint call failed: {str(e)}")

‚ùå All unified analysis retries failed: Claude API endpoint call failed: 400 Client Error: Bad Request for url: https://api.uhg.com/api/cloud/api-management/ai-gateway/1.0/model/us.anthropic.claude-sonnet-4-20250514-v1:0/converse

import requests

BASE_URL = "https://api.uhg.com/api/cloud/api-management/ai-gateway/1.0"
PROJECT_ID = "****************"
MODEL_ID = "us.anthropic.claude-sonnet-4-20250514-v1:0"  # Use the deployment name with underscore

CONFIG = {
    "HCP_CLIENT_ID": "*****************",
    "HCP_CLIENT_SECRET": "********************",
    "HCP_AUTH": "https://api.uhg.com/oauth2/token",
    "HCP_SCOPE": "https://api.uhg.com/.default",
    "HCP_GRANT_TYPE": "client_credentials"
}

def fetch_hcp_token(config):
    data = {
        "grant_type": config["HCP_GRANT_TYPE"],
        "client_id": config["HCP_CLIENT_ID"],
        "client_secret": config["HCP_CLIENT_SECRET"],
        "scope": config["HCP_SCOPE"],
    }
    resp = requests.post(config["HCP_AUTH"], data=data)
    resp.raise_for_status()
    return resp.json()["access_token"]

def converse_call(token, user_message):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}",
        "projectId": PROJECT_ID,
        "guardrail": "high_strength"
    }
    payload = {
        "system": [{"text": "you are an AI assistant"}],
        "messages": [
            {
                "role": "user",
                "content": [{"text": user_message}]
            }
        ],
        "inferenceConfig": {
            "maxTokens": 50
        }
    }
    url = f"{BASE_URL}/model/{MODEL_ID}/converse"
    response = requests.post(url, headers=headers, json=payload, timeout=120)
    print("Status code:", response.status_code)
    try:
        print(response.json())
    except Exception:
        print(response.text)

if __name__ == "__main__":
    token = fetch_hcp_token(CONFIG)
    converse_call(token, "reply only hi")
